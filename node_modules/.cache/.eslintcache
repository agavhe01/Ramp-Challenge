[{"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/index.tsx":"1","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/App.tsx":"2","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/AppContextProvider/index.tsx":"3","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Instructions.tsx":"4","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts":"5","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts":"6","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useEmployees.ts":"7","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/constants.ts":"8","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Transactions/index.tsx":"9","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/InputSelect/index.tsx":"10","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/context.ts":"11","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useCustomFetch.ts":"12","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx":"13","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/fetch.ts":"14","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useWrappedRequest.ts":"15","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/requests.ts":"16","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/InputCheckbox/index.tsx":"17","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/context/TransactionApprovalContext.tsx":"18"},{"size":314,"mtime":1726539091000,"results":"19","hashOfConfig":"20"},{"size":3402,"mtime":1747768216179,"results":"21","hashOfConfig":"20"},{"size":675,"mtime":1726539091000,"results":"22","hashOfConfig":"20"},{"size":593,"mtime":1726539091000,"results":"23","hashOfConfig":"20"},{"size":1945,"mtime":1747767962307,"results":"24","hashOfConfig":"20"},{"size":1645,"mtime":1747768209975,"results":"25","hashOfConfig":"20"},{"size":672,"mtime":1726539091000,"results":"26","hashOfConfig":"20"},{"size":135,"mtime":1726539091000,"results":"27","hashOfConfig":"20"},{"size":1439,"mtime":1747767806041,"results":"28","hashOfConfig":"20"},{"size":3088,"mtime":1747764682158,"results":"29","hashOfConfig":"20"},{"size":238,"mtime":1726539091000,"results":"30","hashOfConfig":"20"},{"size":2201,"mtime":1726539091000,"results":"31","hashOfConfig":"20"},{"size":1520,"mtime":1747768065749,"results":"32","hashOfConfig":"20"},{"size":3115,"mtime":1726539091000,"results":"33","hashOfConfig":"20"},{"size":666,"mtime":1726539091000,"results":"34","hashOfConfig":"20"},{"size":1557,"mtime":1726539091000,"results":"35","hashOfConfig":"20"},{"size":839,"mtime":1747765113921,"results":"36","hashOfConfig":"20"},{"size":1969,"mtime":1747768065644,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nnjgoh",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/index.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/App.tsx",["94"],[],"import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport { TransactionApprovalProvider } from \"./context/TransactionApprovalContext\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <TransactionApprovalProvider>\n      <Fragment>\n        <main className=\"MainContainer\">\n          <Instructions />\n\n          <hr className=\"RampBreak--l\" />\n\n          <InputSelect<Employee>\n            isLoading={employeeUtils.loading}\n            defaultValue={EMPTY_EMPLOYEE}\n            items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n            label=\"Filter by employee\"\n            loadingLabel=\"Loading employees\"\n            parseItem={(item) => ({\n              value: item.id,\n              label: `${item.firstName} ${item.lastName}`,\n            })}\n            onChange={async (newValue) => {\n              if (newValue === null) {\n                return\n              }\n\n              if (newValue.id === \"\") {\n                await loadAllTransactions()\n              } else {\n                await loadTransactionsByEmployee(newValue.id)\n              }\n            }}\n          />\n\n          <div className=\"RampBreak--l\" />\n\n          <div className=\"RampGrid\">\n            <Transactions transactions={transactions} />\n\n            {transactions !== null && transactionsByEmployee === null && paginatedTransactions?.nextPage !== null && (\n              <button\n                className=\"RampButton\"\n                disabled={paginatedTransactionsUtils.loading}\n                onClick={async () => {\n                  await paginatedTransactionsUtils.fetchAll()\n                }}\n              >\n                View More\n              </button>\n            )}\n          </div>\n        </main>\n      </Fragment>\n    </TransactionApprovalProvider>\n  )\n}\n","/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/AppContextProvider/index.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Instructions.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useEmployees.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/constants.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Transactions/index.tsx",[],[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/InputSelect/index.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/context.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useCustomFetch.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/fetch.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useWrappedRequest.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/utils/requests.ts",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/components/InputCheckbox/index.tsx",[],[],"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/context/TransactionApprovalContext.tsx",[],[],{"ruleId":"95","severity":1,"message":"96","line":1,"column":53,"nodeType":"97","messageId":"98","endLine":1,"endColumn":61},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]