{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [previousApprovals, setPreviousApprovals] = useState(new Map());\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    }); // Store current approval states before updating\n\n    if (transactionsByEmployee) {\n      const approvals = new Map();\n      transactionsByEmployee.forEach(transaction => {\n        approvals.set(transaction.id, transaction.approved);\n      });\n      setPreviousApprovals(approvals);\n    } // Apply previous approval states to new transactions\n\n\n    const updatedData = data.map(transaction => {\n      var _previousApprovals$ge;\n\n      return { ...transaction,\n        approved: (_previousApprovals$ge = previousApprovals.get(transaction.id)) !== null && _previousApprovals$ge !== void 0 ? _previousApprovals$ge : transaction.approved\n      };\n    });\n    setTransactionsByEmployee(updatedData);\n  }, [fetchWithCache, transactionsByEmployee, previousApprovals]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"8YUBNsiXi6d10GgIoUIf0s2Oj4I=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","previousApprovals","setPreviousApprovals","Map","fetchById","employeeId","data","approvals","forEach","transaction","set","id","approved","updatedData","map","get","invalidateData"],"sources":["/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n  const [previousApprovals, setPreviousApprovals] = useState<Map<string, boolean>>(new Map())\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      // Store current approval states before updating\n      if (transactionsByEmployee) {\n        const approvals = new Map<string, boolean>()\n        transactionsByEmployee.forEach(transaction => {\n          approvals.set(transaction.id, transaction.approved)\n        })\n        setPreviousApprovals(approvals)\n      }\n\n      // Apply previous approval states to new transactions\n      const updatedData = data.map(transaction => ({\n        ...transaction,\n        approved: previousApprovals.get(transaction.id) ?? transaction.approved\n      }))\n\n      setTransactionsByEmployee(updatedData)\n    },\n    [fetchWithCache, transactionsByEmployee, previousApprovals]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACO,iBAAD,EAAoBC,oBAApB,IAA4CR,QAAQ,CAAuB,IAAIS,GAAJ,EAAvB,CAA1D;EAEA,MAAMC,SAAS,GAAGX,WAAW,CAC3B,MAAOY,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMT,cAAc,CAC/B,wBAD+B,EAE/B;MACEQ;IADF,CAF+B,CAAjC,CAD4B,CAQ5B;;IACA,IAAIN,sBAAJ,EAA4B;MAC1B,MAAMQ,SAAS,GAAG,IAAIJ,GAAJ,EAAlB;MACAJ,sBAAsB,CAACS,OAAvB,CAA+BC,WAAW,IAAI;QAC5CF,SAAS,CAACG,GAAV,CAAcD,WAAW,CAACE,EAA1B,EAA8BF,WAAW,CAACG,QAA1C;MACD,CAFD;MAGAV,oBAAoB,CAACK,SAAD,CAApB;IACD,CAf2B,CAiB5B;;;IACA,MAAMM,WAAW,GAAGP,IAAI,CAACQ,GAAL,CAASL,WAAW;MAAA;;MAAA,OAAK,EAC3C,GAAGA,WADwC;QAE3CG,QAAQ,2BAAEX,iBAAiB,CAACc,GAAlB,CAAsBN,WAAW,CAACE,EAAlC,CAAF,yEAA2CF,WAAW,CAACG;MAFpB,CAAL;IAAA,CAApB,CAApB;IAKAZ,yBAAyB,CAACa,WAAD,CAAzB;EACD,CAzB0B,EA0B3B,CAAChB,cAAD,EAAiBE,sBAAjB,EAAyCE,iBAAzC,CA1B2B,CAA7B;EA6BA,MAAMe,cAAc,GAAGvB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,sBAAR;IAAgCD,OAAhC;IAAyCM,SAAzC;IAAoDY;EAApD,CAAP;AACD;;GAvCepB,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}