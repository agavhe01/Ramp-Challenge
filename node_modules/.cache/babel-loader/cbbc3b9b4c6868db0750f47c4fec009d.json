{"ast":null,"code":"var _jsxFileName = \"/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/context/TransactionApprovalContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionApprovalContext = /*#__PURE__*/createContext(undefined);\nexport function TransactionApprovalProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [approvedTransactions, setApprovedTransactions] = useState(new Set());\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  const setTransactionApproval = (transactionId, approved) => {\n    setApprovedTransactions(prev => {\n      const newSet = new Set(prev);\n\n      if (approved) {\n        newSet.add(transactionId);\n      } else {\n        newSet.delete(transactionId);\n      }\n\n      return newSet;\n    });\n  };\n\n  const initializeApprovals = transactions => {\n    if (!isInitialized) {\n      const initialApprovals = new Set();\n      transactions.forEach(transaction => {\n        if (transaction.approved) {\n          initialApprovals.add(transaction.id);\n        }\n      });\n      setApprovedTransactions(initialApprovals);\n      setIsInitialized(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionApprovalContext.Provider, {\n    value: {\n      approvedTransactions,\n      setTransactionApproval,\n      initializeApprovals\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionApprovalProvider, \"5/xzmeYntUk00PG+QYu8KYPliN0=\");\n\n_c = TransactionApprovalProvider;\nexport function useTransactionApproval() {\n  _s2();\n\n  const context = useContext(TransactionApprovalContext);\n\n  if (context === undefined) {\n    throw new Error(\"useTransactionApproval must be used within a TransactionApprovalProvider\");\n  }\n\n  return context;\n}\n\n_s2(useTransactionApproval, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionApprovalProvider\");","map":{"version":3,"names":["createContext","useContext","useState","TransactionApprovalContext","undefined","TransactionApprovalProvider","children","approvedTransactions","setApprovedTransactions","Set","isInitialized","setIsInitialized","setTransactionApproval","transactionId","approved","prev","newSet","add","delete","initializeApprovals","transactions","initialApprovals","forEach","transaction","id","useTransactionApproval","context","Error"],"sources":["/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/context/TransactionApprovalContext.tsx"],"sourcesContent":["import { createContext, useContext, useState, ReactNode } from \"react\"\nimport { Transaction } from \"../utils/types\"\n\ninterface TransactionApprovalContextType {\n    approvedTransactions: Set<string>\n    setTransactionApproval: (transactionId: string, approved: boolean) => void\n    initializeApprovals: (transactions: Transaction[]) => void\n}\n\nconst TransactionApprovalContext = createContext<TransactionApprovalContextType | undefined>(undefined)\n\nexport function TransactionApprovalProvider({ children }: { children: ReactNode }) {\n    const [approvedTransactions, setApprovedTransactions] = useState<Set<string>>(new Set())\n    const [isInitialized, setIsInitialized] = useState(false)\n\n    const setTransactionApproval = (transactionId: string, approved: boolean) => {\n        setApprovedTransactions(prev => {\n            const newSet = new Set(prev)\n            if (approved) {\n                newSet.add(transactionId)\n            } else {\n                newSet.delete(transactionId)\n            }\n            return newSet\n        })\n    }\n\n    const initializeApprovals = (transactions: Transaction[]) => {\n        if (!isInitialized) {\n            const initialApprovals = new Set<string>()\n            transactions.forEach(transaction => {\n                if (transaction.approved) {\n                    initialApprovals.add(transaction.id)\n                }\n            })\n            setApprovedTransactions(initialApprovals)\n            setIsInitialized(true)\n        }\n    }\n\n    return (\n        <TransactionApprovalContext.Provider value={{ approvedTransactions, setTransactionApproval, initializeApprovals }}>\n            {children}\n        </TransactionApprovalContext.Provider>\n    )\n}\n\nexport function useTransactionApproval() {\n    const context = useContext(TransactionApprovalContext)\n    if (context === undefined) {\n        throw new Error(\"useTransactionApproval must be used within a TransactionApprovalProvider\")\n    }\n    return context\n} "],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAA+D,OAA/D;;AASA,MAAMC,0BAA0B,gBAAGH,aAAa,CAA6CI,SAA7C,CAAhD;AAEA,OAAO,SAASC,2BAAT,OAA4E;EAAA;;EAAA,IAAvC;IAAEC;EAAF,CAAuC;EAC/E,MAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDN,QAAQ,CAAc,IAAIO,GAAJ,EAAd,CAAhE;EACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;;EAEA,MAAMU,sBAAsB,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAA8C;IACzEN,uBAAuB,CAACO,IAAI,IAAI;MAC5B,MAAMC,MAAM,GAAG,IAAIP,GAAJ,CAAQM,IAAR,CAAf;;MACA,IAAID,QAAJ,EAAc;QACVE,MAAM,CAACC,GAAP,CAAWJ,aAAX;MACH,CAFD,MAEO;QACHG,MAAM,CAACE,MAAP,CAAcL,aAAd;MACH;;MACD,OAAOG,MAAP;IACH,CARsB,CAAvB;EASH,CAVD;;EAYA,MAAMG,mBAAmB,GAAIC,YAAD,IAAiC;IACzD,IAAI,CAACV,aAAL,EAAoB;MAChB,MAAMW,gBAAgB,GAAG,IAAIZ,GAAJ,EAAzB;MACAW,YAAY,CAACE,OAAb,CAAqBC,WAAW,IAAI;QAChC,IAAIA,WAAW,CAACT,QAAhB,EAA0B;UACtBO,gBAAgB,CAACJ,GAAjB,CAAqBM,WAAW,CAACC,EAAjC;QACH;MACJ,CAJD;MAKAhB,uBAAuB,CAACa,gBAAD,CAAvB;MACAV,gBAAgB,CAAC,IAAD,CAAhB;IACH;EACJ,CAXD;;EAaA,oBACI,QAAC,0BAAD,CAA4B,QAA5B;IAAqC,KAAK,EAAE;MAAEJ,oBAAF;MAAwBK,sBAAxB;MAAgDO;IAAhD,CAA5C;IAAA,UACKb;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;GAlCeD,2B;;KAAAA,2B;AAoChB,OAAO,SAASoB,sBAAT,GAAkC;EAAA;;EACrC,MAAMC,OAAO,GAAGzB,UAAU,CAACE,0BAAD,CAA1B;;EACA,IAAIuB,OAAO,KAAKtB,SAAhB,EAA2B;IACvB,MAAM,IAAIuB,KAAJ,CAAU,0EAAV,CAAN;EACH;;EACD,OAAOD,OAAP;AACH;;IANeD,sB"},"metadata":{},"sourceType":"module"}