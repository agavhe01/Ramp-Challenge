{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    // Don't fetch if we've reached the end of the data\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n      return;\n    }\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      } // Merge the new transactions with existing ones, preserving approval states\n\n\n      const mergedData = [...previousResponse.data];\n      response.data.forEach(newTransaction => {\n        const existingIndex = mergedData.findIndex(t => t.id === newTransaction.id);\n\n        if (existingIndex === -1) {\n          mergedData.push(newTransaction);\n        } else {\n          // Preserve the existing transaction's approval state\n          mergedData[existingIndex] = { ...newTransaction,\n            approved: mergedData[existingIndex].approved\n          };\n        }\n      });\n      return {\n        data: mergedData,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","response","page","previousResponse","mergedData","data","forEach","newTransaction","existingIndex","findIndex","t","id","push","approved","invalidateData"],"sources":["/Users/agavhera/Dreams of better  Tomorow/src/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    // Don't fetch if we've reached the end of the data\n    if (paginatedTransactions?.nextPage === null) {\n      return\n    }\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      // Merge the new transactions with existing ones, preserving approval states\n      const mergedData = [...previousResponse.data]\n      response.data.forEach((newTransaction) => {\n        const existingIndex = mergedData.findIndex(t => t.id === newTransaction.id)\n        if (existingIndex === -1) {\n          mergedData.push(newTransaction)\n        } else {\n          // Preserve the existing transaction's approval state\n          mergedData[existingIndex] = {\n            ...newTransaction,\n            approved: mergedData[existingIndex].approved\n          }\n        }\n      })\n\n      return {\n        data: mergedData,\n        nextPage: response.nextPage\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC;IACA,IAAI,CAAAM,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEG,QAAvB,MAAoC,IAAxC,EAA8C;MAC5C;IACD;;IAED,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACnC,uBADmC,EAEnC;MACEO,IAAI,EAAEL,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACG;IADnE,CAFmC,CAArC;IAOAF,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAb,IAAqBE,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOF,QAAP;MACD,CAH4C,CAK7C;;;MACA,MAAMG,UAAU,GAAG,CAAC,GAAGD,gBAAgB,CAACE,IAArB,CAAnB;MACAJ,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAuBC,cAAD,IAAoB;QACxC,MAAMC,aAAa,GAAGJ,UAAU,CAACK,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASJ,cAAc,CAACI,EAAlD,CAAtB;;QACA,IAAIH,aAAa,KAAK,CAAC,CAAvB,EAA0B;UACxBJ,UAAU,CAACQ,IAAX,CAAgBL,cAAhB;QACD,CAFD,MAEO;UACL;UACAH,UAAU,CAACI,aAAD,CAAV,GAA4B,EAC1B,GAAGD,cADuB;YAE1BM,QAAQ,EAAET,UAAU,CAACI,aAAD,CAAV,CAA0BK;UAFV,CAA5B;QAID;MACF,CAXD;MAaA,OAAO;QACLR,IAAI,EAAED,UADD;QAELJ,QAAQ,EAAEC,QAAQ,CAACD;MAFd,CAAP;IAID,CAxBuB,CAAxB;EAyBD,CAtC2B,EAsCzB,CAACL,cAAD,EAAiBE,qBAAjB,CAtCyB,CAA5B;EAwCA,MAAMiB,cAAc,GAAGvB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDe;EAAlD,CAAP;AACD;;GAnDepB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}